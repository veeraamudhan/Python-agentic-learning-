
# **1. What is a Class in Python?**

* A **class** is like a **blueprint** to create objects.
* An **object** is an actual thing created from the blueprint.
  Example:

  * Blueprint = Car design (class)
  * Object = A real Toyota or BMW car

Here,

* `Order` is a class ‚Üí blueprint for an order.
* `AdminPortal` and `CustomerApp` are also classes.
* `order = Order(...)` creates an object (a real order placed by a customer).

---

# **2. What is Encapsulation?**

Encapsulation means **hiding the details** of how something works and only showing what is necessary.

Think of it like:

* A TV remote ‚Äì you only see buttons (public).
* Inside circuits (private) are hidden.

In Python, we use naming conventions:

* **Public** ‚Üí everyone can use (`customer_name`).
* **Protected** (starts with `_`) ‚Üí should be used only inside the class or subclasses (`_get_admin_view`).
* **Private** (starts with `__`) ‚Üí hidden from outside (`__total_amount`, `__discount`, `__calculate_final`).

---

# **3. The `Order` Class**

```python
class Order:
    def __init__(self, customer_name, items, total_amount, discount):
        self.customer_name = customer_name   # public
        self.items = items                   # public
        self.__total_amount = total_amount   # private
        self.__discount = discount           # private
```

### **Breakdown:**

* `__init__` is a **constructor** ‚Üí runs automatically when you create an object.
* `self.customer_name` ‚Üí public, can be seen outside.
* `self.items` ‚Üí public.
* `self.__total_amount` ‚Üí private (hidden).
* `self.__discount` ‚Üí private (hidden).

üëâ Example:

```python
order = Order("Veera", ["Shoes", "Socks"], 2000, 200)

print(order.customer_name)  # ‚úÖ Works
print(order.items)          # ‚úÖ Works
print(order.__total_amount) # ‚ùå Error (private)
```

---

# **4. Private Method**

```python
def __calculate_final(self):
    return self.__total_amount - self.__discount
```

* Starts with `__`, so it‚Äôs private.
* Only this class can use it, **not accessible outside**.
* It calculates the **final price** after applying discount.

üëâ Example:
If total = ‚Çπ2000 and discount = ‚Çπ200 ‚Üí final bill = ‚Çπ1800.

---

# **5. Protected Method**

```python
def _get_admin_view(self):
    return {
        "Customer": self.customer_name,
        "Items": self.items,
        "Total Amount": f"‚Çπ{self.__total_amount}",
        "Discount Applied": f"‚Çπ{self.__discount}",
        "Final Bill": f"‚Çπ{self.__calculate_final()}"
    }
```

* `_` means **protected** (not strict in Python, but by convention).
* Gives a **detailed order summary**:

  * Customer name
  * Items
  * Total amount before discount
  * Discount applied
  * Final bill after discount

This is useful for **admins** who need to see everything.

---

# **6. Public Method**

```python
def get_customer_view(self):
    return {
        "Customer": self.customer_name,
        "Items": self.items,
        "Final Bill": f"‚Çπ{self.__calculate_final()}"
    }
```

* This is **public**.
* Anyone can access it.
* Customers don‚Äôt need to see sensitive details like **total amount** and **discount**, they only care about the **final bill**.

---

# **7. AdminPortal Class**

```python
class AdminPortal:
    def show_order(self, order):
        return order._get_admin_view()
```

* This is like the **Admin‚Äôs screen**.
* It calls `_get_admin_view()` from `Order`.
* Shows **complete details** to the admin.

---

# **8. CustomerApp Class**

```python
class CustomerApp:
    def show_order(self, order):
        return order.get_customer_view()
```

* This is the **Customer‚Äôs app screen**.
* It calls `get_customer_view()` from `Order`.
* Shows **only final bill + items**.

---

# **9. Example of How It Works**

```python
order = Order("Veera", ["Shoes", "Socks"], 2000, 200)

admin = AdminPortal()
customer = CustomerApp()

print(admin.show_order(order))
# {'Customer': 'Veera', 'Items': ['Shoes', 'Socks'],
#  'Total Amount': '‚Çπ2000', 'Discount Applied': '‚Çπ200',
#  'Final Bill': '‚Çπ1800'}

print(customer.show_order(order))
# {'Customer': 'Veera', 'Items': ['Shoes', 'Socks'],
#  'Final Bill': '‚Çπ1800'}
```

üëâ Admin sees everything (‚Çπ2000 total, ‚Çπ200 discount, ‚Çπ1800 final).
üëâ Customer sees only what matters (‚Çπ1800 final).

---

# **10. Summary of Key Concepts**

* **Class = Blueprint**, **Object = Real instance**
* **Encapsulation = Hiding details & exposing only necessary parts**
* **Public** ‚Üí Everyone can see (`customer_name`, `items`, `get_customer_view`)
* **Protected** ‚Üí For trusted users (`_get_admin_view`)
* **Private** ‚Üí Hidden, used only inside class (`__total_amount`, `__discount`, `__calculate_final`)
* **Different views for different users** ‚Üí Admin vs Customer

